// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.19.9 clang-1700.3.19.1)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name BlockID
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import ARKit
import AVFoundation
import Accelerate
import Alamofire
import AuthenticationServices
import BigInt
@_exported import BlockID
import Combine
import CommonCrypto
import CoreNFC
import CryptoKit
import CryptoSwift
import CryptoTokenKit
import Foundation
import LocalAuthentication
import Metal
import MetalKit
import OpenSSL
import SafariServices
import Swift
import SwiftUI
import UIKit
import Vision
import WalletCore
import WebKit
import _Concurrency
import _CoreNFC_UIKit
import _StringProcessing
import _SwiftConcurrencyShims
import secp256k1
@objc @_inheritsConvenienceInitializers public class BIDServiceDirectory : ObjectiveC.NSObject, Swift.Codable {
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
open class KeychainWrapper {
  @available(*, deprecated, message: "KeychainWrapper.defaultKeychainWrapper is deprecated, use KeychainWrapper.standard instead")
  public static let defaultKeychainWrapper: BlockID.KeychainWrapper
  public static let standard: BlockID.KeychainWrapper
  public var serviceName: Swift.String {
    get
  }
  public var accessGroup: Swift.String? {
    get
  }
  #if compiler(>=5.3) && $NonescapableTypes
  public init(serviceName: Swift.String, accessGroup: Swift.String? = nil)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  open func hasValue(forKey key: Swift.String, withAccessibility accessibility: BlockID.KeychainItemAccessibility? = nil) -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  open func accessibilityOfKey(_ key: Swift.String) -> BlockID.KeychainItemAccessibility?
  #endif
  open func allKeys() -> Swift.Set<Swift.String>
  #if compiler(>=5.3) && $NonescapableTypes
  open func integer(forKey key: Swift.String, withAccessibility accessibility: BlockID.KeychainItemAccessibility? = nil) -> Swift.Int?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  open func float(forKey key: Swift.String, withAccessibility accessibility: BlockID.KeychainItemAccessibility? = nil) -> Swift.Float?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  open func double(forKey key: Swift.String, withAccessibility accessibility: BlockID.KeychainItemAccessibility? = nil) -> Swift.Double?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  open func bool(forKey key: Swift.String, withAccessibility accessibility: BlockID.KeychainItemAccessibility? = nil) -> Swift.Bool?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  open func string(forKey key: Swift.String, withAccessibility accessibility: BlockID.KeychainItemAccessibility? = nil) -> Swift.String?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  open func object(forKey key: Swift.String, withAccessibility accessibility: BlockID.KeychainItemAccessibility? = nil) -> (any Foundation.NSCoding)?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  open func data(forKey key: Swift.String, withAccessibility accessibility: BlockID.KeychainItemAccessibility? = nil) -> Foundation.Data?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  open func dataRef(forKey key: Swift.String, withAccessibility accessibility: BlockID.KeychainItemAccessibility? = nil) -> Foundation.Data?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @discardableResult
  open func set(_ value: Swift.Int, forKey key: Swift.String, withAccessibility accessibility: BlockID.KeychainItemAccessibility? = nil) -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @discardableResult
  open func set(_ value: Swift.Float, forKey key: Swift.String, withAccessibility accessibility: BlockID.KeychainItemAccessibility? = nil) -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @discardableResult
  open func set(_ value: Swift.Double, forKey key: Swift.String, withAccessibility accessibility: BlockID.KeychainItemAccessibility? = nil) -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @discardableResult
  open func set(_ value: Swift.Bool, forKey key: Swift.String, withAccessibility accessibility: BlockID.KeychainItemAccessibility? = nil) -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @discardableResult
  open func set(_ value: Swift.String, forKey key: Swift.String, withAccessibility accessibility: BlockID.KeychainItemAccessibility? = nil) -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @discardableResult
  open func set(_ value: any Foundation.NSCoding, forKey key: Swift.String, withAccessibility accessibility: BlockID.KeychainItemAccessibility? = nil) -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @discardableResult
  open func set(_ value: Foundation.Data, forKey key: Swift.String, withAccessibility accessibility: BlockID.KeychainItemAccessibility? = nil) -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @available(*, deprecated, message: "remove is deprecated, use removeObject instead")
  @discardableResult
  open func remove(key: Swift.String, withAccessibility accessibility: BlockID.KeychainItemAccessibility? = nil) -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @discardableResult
  open func removeObject(forKey key: Swift.String, withAccessibility accessibility: BlockID.KeychainItemAccessibility? = nil) -> Swift.Bool
  #endif
  @discardableResult
  open func removeAllKeys() -> Swift.Bool
  open class func wipeKeychain()
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public struct DataGroupHash {
  public var id: Swift.String
  public var sodHash: Swift.String
  public var computedHash: Swift.String
  public var match: Swift.Bool
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ChipAuthenticationPublicKeyInfo : BlockID.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getKeyId() -> Swift.Int
  @objc deinit
}
public enum KeychainItemAccessibility {
  @available(iOS 4, *)
  case afterFirstUnlock
  @available(iOS 4, *)
  case afterFirstUnlockThisDeviceOnly
  @available(iOS 4, *)
  case always
  @available(iOS 8, *)
  case whenPasscodeSetThisDeviceOnly
  @available(iOS 4, *)
  case alwaysThisDeviceOnly
  @available(iOS 4, *)
  case whenUnlocked
  @available(iOS 4, *)
  case whenUnlockedThisDeviceOnly
  public static func == (a: BlockID.KeychainItemAccessibility, b: BlockID.KeychainItemAccessibility) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class BIDAccount : Swift.Codable {
  public var source: Swift.String?
  public var tenantId: Swift.String?
  public var communityId: Swift.String?
  public var otpSeed: Swift.String?
  #if compiler(>=5.3) && $NonescapableTypes
  public func getAccountOTP() -> BlockID.TOTP?
  #endif
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup2 : BlockID.DataGroup {
  public var nrImages: Swift.Int {
    get
  }
  public var versionNumber: Swift.Int {
    get
  }
  public var lengthOfRecord: Swift.Int {
    get
  }
  public var numberOfFacialImages: Swift.Int {
    get
  }
  public var facialRecordDataLength: Swift.Int {
    get
  }
  public var nrFeaturePoints: Swift.Int {
    get
  }
  public var gender: Swift.Int {
    get
  }
  public var eyeColor: Swift.Int {
    get
  }
  public var hairColor: Swift.Int {
    get
  }
  public var featureMask: Swift.Int {
    get
  }
  public var expression: Swift.Int {
    get
  }
  public var poseAngle: Swift.Int {
    get
  }
  public var poseAngleUncertainty: Swift.Int {
    get
  }
  public var faceImageType: Swift.Int {
    get
  }
  public var imageDataType: Swift.Int {
    get
  }
  public var imageWidth: Swift.Int {
    get
  }
  public var imageHeight: Swift.Int {
    get
  }
  public var imageColorSpace: Swift.Int {
    get
  }
  public var sourceType: Swift.Int {
    get
  }
  public var deviceType: Swift.Int {
    get
  }
  public var quality: Swift.Int {
    get
  }
  public var imageData: [Swift.UInt8] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BIDDocumentKeys {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup7 : BlockID.DataGroup {
  public var imageData: [Swift.UInt8] {
    get
  }
  @objc deinit
}
public protocol DocumentScanDelegate {
  #if compiler(>=5.3) && $NonescapableTypes
  func onDocumentScanResponse(status: Swift.Bool, document: Swift.String?, sessionID: Swift.String?, error: BlockID.ErrorResponse?)
  #endif
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class DocumentScannerViewController : UIKit.UIViewController {
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency convenience public init(docType: BlockID.DocumentScannerType, dvcId: Swift.String? = nil, delegate: any BlockID.DocumentScanDelegate)
  #endif
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  #endif
  @objc deinit
}
extension BlockID.DocumentScannerViewController : SafariServices.SFSafariViewControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func safariViewControllerDidFinish(_ controller: SafariServices.SFSafariViewController)
}
@objc @_inheritsConvenienceInitializers public class AccountAuthConstants : ObjectiveC.NSObject {
  public static let kAuthSender: Swift.String
  public static let kNativeAuthScehema: Swift.String
  public static let kAuthMethodScep: Swift.String
  #if compiler(>=5.3) && $NonescapableTypes
  public static func isNativeAuth(authPage: Swift.String!) -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public static func isPwdResetAvailable(authPage: Swift.String!) -> Swift.Bool
  #endif
  @objc override dynamic public init()
  @objc deinit
}
public class BIDOrigin : Swift.Codable, Swift.Equatable {
  public var api: Swift.String?
  public var tag: Swift.String?
  public var name: Swift.String?
  public var community: Swift.String?
  public var publicKey: Swift.String?
  public var session: Swift.String?
  public var authPage: Swift.String?
  public var communityName: Swift.String?
  public var communityId: Swift.String?
  public var url: Swift.String?
  public init()
  #if compiler(>=5.3) && $NonescapableTypes
  public func getAuthMethod() -> Swift.String?
  #endif
  public static func == (lhs: BlockID.BIDOrigin, rhs: BlockID.BIDOrigin) -> Swift.Bool
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public enum AccessCodeType : Swift.String {
  case VERIFICATION
  case INVITATION
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.String)
  #endif
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class SessionPollingAPI : ObjectiveC.NSObject {
  #if compiler(>=5.3) && $NonescapableTypes
  public func makeSessionRequest(requestMethod: Alamofire.HTTPMethod, serviceUrl: Swift.String?, requestBody: BlockID.RequestBody?, requestHeaders: Alamofire.HTTPHeaders, completion: @escaping BlockID.SessionAPICallback)
  #endif
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, *)
public class TagReader {
  @objc deinit
}
public protocol QRScanResponseDelegate : AnyObject {
  #if compiler(>=5.3) && $NonescapableTypes
  func onQRScanResult(qrCodeData: Swift.String?)
  #endif
}
@objc public class QRScannerHelper : ObjectiveC.NSObject {
  public init(bidScannerView: BlockID.BIDScannerView, kQRScanResponseDelegate: any BlockID.QRScanResponseDelegate)
  public func startQRScanning()
  public func stopQRScanning()
  public func isRunning() -> Swift.Bool
  @objc deinit
}
public struct DTHStruct {
  public static func method01() -> Swift.Bool
  public static func method02() -> Swift.Bool
  public static func method03() -> Swift.Bool
  public static func method04() -> Swift.Bool
  public static func method05() -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class IPProvider : ObjectiveC.NSObject {
  public static let shared: BlockID.IPProvider
  #if compiler(>=5.3) && $NonescapableTypes
  public func getIPAddress() -> Swift.String?
  #endif
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BIDVault : ObjectiveC.NSObject {
  public static let sharedInstance: BlockID.BIDVault
  public func setPin(pin: Swift.String)
  #if compiler(>=5.3) && $NonescapableTypes
  public func getLicenseKey() -> Swift.String?
  #endif
  public func setLicenseKey(key: Swift.String)
  public func setDvcId(dvcId: Swift.String)
  #if compiler(>=5.3) && $NonescapableTypes
  public func getDvcId() -> Swift.String?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func getTenant() -> BlockID.BIDTenant?
  #endif
  public func setTenant(tenant: BlockID.BIDTenant)
  #if compiler(>=5.3) && $NonescapableTypes
  public func getAppTenant() -> BlockID.BIDTenant?
  #endif
  public func setAppTenant(appTenant: BlockID.BIDTenant)
  public func setLiveIDRegistered(_ value: Swift.Bool)
  public func isLiveIDRegistered() -> Swift.Bool
  public func setPINRegistered(_ value: Swift.Bool)
  public func isPINRegistered() -> Swift.Bool
  public func setAuthAsset(value: Swift.String, forKey key: Swift.String)
  #if compiler(>=5.3) && $NonescapableTypes
  public func getAuthAssetValue(forKey key: Swift.String) -> Swift.String?
  #endif
  public func removeAuthAssetValue(forKey key: Swift.String)
  #if compiler(>=5.3) && $NonescapableTypes
  public func getApplicationWallet() -> BlockID.BIDWallet?
  #endif
  public func setApplicationWallet(wallet: BlockID.BIDWallet)
  #if compiler(>=5.3) && $NonescapableTypes
  public func getServerPublicKey() -> Swift.String?
  #endif
  public func setServerPublicKey(key: Swift.String)
  #if compiler(>=5.3) && $NonescapableTypes
  public func getOtpSeed() -> Swift.String?
  #endif
  public func setOtpSeed(key: Swift.String)
  #if compiler(>=5.3) && $NonescapableTypes
  public func getSharedECDSAKey(key: Swift.String) -> Swift.String?
  #endif
  public func setSharedECDSAKey(key: Swift.String, value: Swift.String)
  #if compiler(>=5.3) && $NonescapableTypes
  public func getLicenseModules() -> BlockID.BIDLicense?
  #endif
  public func setLicenseModules(modules: BlockID.BIDLicense)
  #if compiler(>=5.3) && $NonescapableTypes
  public func getLinkedAccounts() -> [BlockID.BIDLinkedAccount]?
  #endif
  public func setLinkedAccounts(accountsArr: [BlockID.BIDLinkedAccount])
  #if compiler(>=5.3) && $NonescapableTypes
  public func setCurrentAccount(account: BlockID.BIDLinkedAccount? = nil)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func getCurrentAccount() -> BlockID.BIDLinkedAccount?
  #endif
  public func setDocument(value: [Swift.String : Any])
  #if compiler(>=5.3) && $NonescapableTypes
  public func getDocumentsList() -> Swift.String?
  #endif
  public func removeDocument(value: [Swift.String : Any])
  public func setData(_ dataStr: Swift.String) -> Swift.String
  #if compiler(>=5.3) && $NonescapableTypes
  public func getData(_ key: Swift.String) -> Swift.String?
  #endif
  public func removeData(_ key: Swift.String)
  @objc deinit
}
extension BlockID.BIDVault {
  public func setTrustedSessionsSources(info: BlockID.FetchConfigResponse)
  #if compiler(>=5.3) && $NonescapableTypes
  public func getTrustedSessionsSources() -> [Swift.String]?
  #endif
}
extension BlockID.BIDVault {
  public func setIALValue(ial: Swift.String)
  #if compiler(>=5.3) && $NonescapableTypes
  public func getIALValue() -> Swift.String?
  #endif
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Enrollments : ObjectiveC.NSObject {
  public static let sharedInstance: BlockID.Enrollments
  public func isDigitalAssetsEnabled() -> Swift.Bool
  public func isBiometricAssetsEnabled() -> Swift.Bool
  public func isPersonalAssetsEnabled() -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class BiometricAssets : ObjectiveC.NSObject {
  final public let LiveIDEnabled: Swift.Bool
  final public let PinEnabled: Swift.Bool
  final public let BiometricEnabled: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class PersonalAssets : ObjectiveC.NSObject {
  final public let EmailEnabled: Swift.Bool
  final public let PhoneEnabled: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class DigitalAssets : ObjectiveC.NSObject {
  final public let DLEnabled: Swift.Bool
  final public let PPEnabled: Swift.Bool
  final public let NIDEnabled: Swift.Bool
  final public let SSNEnabled: Swift.Bool
  final public let HealthCardEnabled: Swift.Bool
  final public let ImmunityCertEnabled: Swift.Bool
  final public let IdentityEnabled: Swift.Bool
  final public let MiscEnabled: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
public enum PassportAuthenticationStatus {
  case notDone
  case success
  case failed
  public static func == (a: BlockID.PassportAuthenticationStatus, b: BlockID.PassportAuthenticationStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public class NFCPassportModel {
  public var documentType: Swift.String {
    get
  }
  public var documentSubType: Swift.String {
    get
  }
  public var personalNumber: Swift.String {
    get
  }
  public var documentNumber: Swift.String {
    get
  }
  public var issuingAuthority: Swift.String {
    get
  }
  public var documentExpiryDate: Swift.String {
    get
  }
  public var dateOfBirth: Swift.String {
    get
  }
  public var gender: Swift.String {
    get
  }
  public var nationality: Swift.String {
    get
  }
  public var lastName: Swift.String {
    get
  }
  public var firstName: Swift.String {
    get
  }
  public var passportMRZ: Swift.String {
    get
  }
  #if compiler(>=5.3) && $NonescapableTypes
  public var placeOfBirth: Swift.String? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public var residenceAddress: Swift.String? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public var phoneNumber: Swift.String? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public var documentSigningCertificate: BlockID.X509Wrapper? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public var countrySigningCertificate: BlockID.X509Wrapper? {
    get
  }
  #endif
  public var LDSVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  public var dataGroupsAvailable: [BlockID.DataGroupId] {
    get
  }
  public var dataGroupsRead: [BlockID.DataGroupId : BlockID.DataGroup] {
    get
  }
  public var dataGroupHashes: [BlockID.DataGroupId : BlockID.DataGroupHash] {
    get
  }
  public var cardAccess: BlockID.CardAccess? {
    get
  }
  public var BACStatus: BlockID.PassportAuthenticationStatus {
    get
  }
  public var PACEStatus: BlockID.PassportAuthenticationStatus {
    get
  }
  public var chipAuthenticationStatus: BlockID.PassportAuthenticationStatus {
    get
  }
  public var passportCorrectlySigned: Swift.Bool {
    get
  }
  public var documentSigningCertificateVerified: Swift.Bool {
    get
  }
  public var passportDataNotTampered: Swift.Bool {
    get
  }
  public var activeAuthenticationPassed: Swift.Bool {
    get
  }
  public var activeAuthenticationChallenge: [Swift.UInt8] {
    get
  }
  public var activeAuthenticationSignature: [Swift.UInt8] {
    get
  }
  public var verificationErrors: [any Swift.Error] {
    get
  }
  public var isPACESupported: Swift.Bool {
    get
  }
  public var isChipAuthenticationSupported: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $NonescapableTypes
  public var passportImage: UIKit.UIImage? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public var signatureImage: UIKit.UIImage? {
    get
  }
  #endif
  public var activeAuthenticationSupported: Swift.Bool {
    get
  }
  public init()
  public init(from dump: [Swift.String : Swift.String])
  public func addDataGroup(_ id: BlockID.DataGroupId, dataGroup: BlockID.DataGroup)
  #if compiler(>=5.3) && $NonescapableTypes
  public func getDataGroup(_ id: BlockID.DataGroupId) -> BlockID.DataGroup?
  #endif
  public func dumpPassportData(selectedDataGroups: [BlockID.DataGroupId], includeActiveAuthenticationData: Swift.Bool = false) -> [Swift.String : Swift.String]
  public func getHashesForDatagroups(hashAlgorythm: Swift.String) -> [BlockID.DataGroupId : [Swift.UInt8]]
  #if compiler(>=5.3) && $NonescapableTypes
  public func verifyPassport(masterListURL: Foundation.URL?, useCMSVerification: Swift.Bool = false)
  #endif
  public func verifyActiveAuthentication(challenge: [Swift.UInt8], signature: [Swift.UInt8])
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class OpenSSLUtils {
  public static func getOpenSSLError() -> Swift.String
  #if compiler(>=5.3) && $NonescapableTypes
  @available(iOS 13, macOS 10.15, *)
  public static func getPublicKeyData(from key: Swift.OpaquePointer) -> [Swift.UInt8]?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @available(iOS 13, macOS 10.15, *)
  public static func decodePublicKeyFromBytes(pubKeyData: [Swift.UInt8], params: Swift.OpaquePointer) -> Swift.OpaquePointer?
  #endif
  public static func computeSharedSecret(privateKeyPair: Swift.OpaquePointer, publicKey: Swift.OpaquePointer) -> [Swift.UInt8]
  @objc deinit
}
@available(iOS 13, *)
public struct ResponseAPDU {
  public var data: [Swift.UInt8]
  public var sw1: Swift.UInt8
  public var sw2: Swift.UInt8
  public init(data: [Swift.UInt8], sw1: Swift.UInt8, sw2: Swift.UInt8)
}
public enum BiometricError {
  case NoID
  case cancel
  case lockout
  case notAvailable
  case notEnrolled
  case password
  public static func == (a: BlockID.BiometricError, b: BlockID.BiometricError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum BiometricType {
  case none
  case touchID
  case faceID
  public static func == (a: BlockID.BiometricType, b: BlockID.BiometricType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class DeviceAuth : ObjectiveC.NSObject {
  public var isEnabled: Swift.Bool?
  public var authType: BlockID.BiometricType?
  public var biometricTypeString: Swift.String?
  public var currentBiometric: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
public enum LogLevel : Swift.Int, Swift.CaseIterable {
  case verbose
  case debug
  case info
  case warning
  case error
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.Int)
  #endif
  public typealias AllCases = [BlockID.LogLevel]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [BlockID.LogLevel] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Log {
  public static var logLevel: BlockID.LogLevel
  public static var storeLogs: Swift.Bool
  public static var logData: [Swift.String]
  public class func verbose(_ msg: @autoclosure () -> Swift.String)
  public class func debug(_ msg: @autoclosure () -> Swift.String)
  public class func info(_ msg: @autoclosure () -> Swift.String)
  public class func warning(_ msg: @autoclosure () -> Swift.String)
  public class func error(_ msg: @autoclosure () -> Swift.String)
  public class func clearStoredLogs()
  @objc deinit
}
public typealias BIDTenantRegisterationCallback = (_ status: Swift.Bool, _ error: BlockID.ErrorResponse?, _ object: BlockID.BIDTenant?) -> Swift.Void
public typealias UserAPICallback = (_ status: Swift.Bool, _ error: BlockID.ErrorResponse?) -> Swift.Void
public typealias LiveIDCallback = (_ status: Swift.Bool, _ error: BlockID.ErrorResponse?) -> Swift.Void
public typealias BIDWalletCreationCallback = (_ status: Swift.Bool, _ error: BlockID.ErrorResponse?) -> Swift.Void
public typealias AccessCodeValidationAPICallback = (_ status: Swift.Bool, _ error: BlockID.ErrorResponse?, _ object: BlockID.AccessCodeValidationResponseDecryptedData?) -> Swift.Void
public typealias AuthenticateUserCallback = (_ status: Swift.Bool, _ sessionId: Swift.String?, _ error: BlockID.ErrorResponse?) -> Swift.Void
public typealias SessionResponseCallback = (_ status: Swift.Bool, _ object: Swift.String?, _ error: BlockID.ErrorResponse?) -> Swift.Void
public typealias SCEPCertificateCallback = (_ status: Swift.Bool, _ error: BlockID.ErrorResponse?) -> Swift.Void
public typealias KYCCallback = (_ status: Swift.Bool, _ kycHash: Swift.String?, _ error: BlockID.ErrorResponse?) -> Swift.Void
public typealias MessageGatewaysCallback = (_ status: Swift.Bool, _ object: [BlockID.MessageGateway]?, _ error: BlockID.ErrorResponse?) -> Swift.Void
public typealias IALCallback = (_ status: Swift.Bool, _ ialValue: Swift.String, _ error: BlockID.ErrorResponse?) -> Swift.Void
public typealias VCsCallback = (_ status: Swift.Bool, _ error: BlockID.ErrorResponse?, _ response: Swift.String?) -> Swift.Void
public typealias VPCallback = (_ status: Swift.Bool, _ error: BlockID.ErrorResponse?, _ response: Swift.String?) -> Swift.Void
public typealias FetchConfigCallback = (_ status: Swift.Bool, _ error: BlockID.ErrorResponse?, _ response: BlockID.FetchConfigResponse?) -> Swift.Void
public typealias FetchDocumentsCallback = (_ status: Swift.Bool, _ responseDict: [Swift.String : Any]?, _ error: BlockID.ErrorResponse?) -> Swift.Void
public typealias FetchUserAccountsInfoCallback = (_ status: Swift.Bool, _ error: BlockID.ErrorResponse?) -> Swift.Void
public typealias DocumentSessionCallback = (_ status: Swift.Bool, _ response: Swift.String?, _ error: BlockID.ErrorResponse?) -> Swift.Void
public typealias PollSessionCallback = (_ status: Swift.Bool, _ response: Swift.String?, _ error: BlockID.ErrorResponse?) -> Swift.Void
public typealias RestoreWalletWithLiveIDCallback = (_ status: Swift.Bool, _ error: BlockID.ErrorResponse?) -> Swift.Void
public typealias UserAccountsRemovedCallback = (_ status: Swift.Bool, _ response: [BlockID.BIDLinkedAccount]?, _ error: BlockID.ErrorResponse?) -> Swift.Void
public typealias PasskeyCallback = (_ status: Swift.Bool, _ response: BlockID.PasskeyResponse?, _ error: BlockID.ErrorResponse?) -> Swift.Void
public typealias FetchUserResponseCallBack = (Swift.Bool, Swift.String?, BlockID.ErrorResponse?) -> Swift.Void
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BlockIDSDK : ObjectiveC.NSObject {
  public static let sharedInstance: BlockID.BlockIDSDK
  public func isReady() -> Swift.Bool
  public func setLicenseKey(key: Swift.String)
  public func getLicenseKey() -> Swift.String
  public func setDvcID(dvcID: Swift.String)
  public func initiateTempWallet(completion: @escaping BlockID.BIDWalletCreationCallback)
  public func registerTenant(tenant: BlockID.BIDTenant, completion: @escaping BlockID.BIDTenantRegisterationCallback)
  public func updateAccessibilityOfKeychain()
  public func commitApplicationWallet()
  public func setPin(pin: Swift.String, proofedBy: Swift.String, completion: @escaping BlockID.UserAPICallback)
  public func verifyPin(pin: Swift.String) -> Swift.Bool
  public func removePin(pin: Swift.String, completion: @escaping BlockID.UserAPICallback)
  #if compiler(>=5.3) && $NonescapableTypes
  public func getLiveIDImage() -> UIKit.UIImage?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func setLiveID(liveIdImage: UIKit.UIImage, liveIdProofedBy: Swift.String? = nil, sigToken: Swift.String? = nil, livenessResult: Swift.String?, mobileSessionId: Swift.String? = nil, mobileDocumentId: Swift.String? = nil, completion: @escaping BlockID.LiveIDCallback)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func verifyFaceWithLiveness(image: UIKit.UIImage, mobileSessionId: Swift.String? = nil, mobileDocumentId: Swift.String? = nil, completion: @escaping BlockID.LiveIDCallback)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func verifyLiveID(image: UIKit.UIImage, sigToken: Swift.String? = nil, livenessResult: Swift.String?, mobileSessionId: Swift.String? = nil, mobileDocumentId: Swift.String? = nil, completion: @escaping BlockID.LiveIDCallback)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func registerDocument(obj: [Swift.String : Any], sigToken: Swift.String? = nil, mobileSessionId: Swift.String? = nil, mobileDocumentId: Swift.String? = nil, completion: @escaping BlockID.UserAPICallback)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func registerDocument(obj: [Swift.String : Any], storeArtifacts: Swift.Bool, syncArtifacts: Swift.Bool, sigToken: Swift.String? = nil, mobileSessionId: Swift.String? = nil, mobileDocumentId: Swift.String? = nil, completion: @escaping BlockID.UserAPICallback)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func registerDocument(obj: [Swift.String : Any], liveIdProofedBy: Swift.String, docSignToken: Swift.String? = nil, faceImage: UIKit.UIImage, liveIDSignToken: Swift.String? = nil, mobileSessionId: Swift.String? = nil, mobileDocumentId: Swift.String? = nil, completion: @escaping BlockID.UserAPICallback)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func registerDocument(obj: [Swift.String : Any], storeArtifacts: Swift.Bool, syncArtifacts: Swift.Bool, liveIdProofedBy: Swift.String, docSignToken: Swift.String? = nil, faceImage: UIKit.UIImage, liveIDSignToken: Swift.String? = nil, mobileSessionId: Swift.String? = nil, mobileDocumentId: Swift.String? = nil, completion: @escaping BlockID.UserAPICallback)
  #endif
  public func isCurrentDocumentExists(dictDoc: [Swift.String : Any]) -> Swift.Bool
  public func unregisterDocument(dictDoc: [Swift.String : Any], completion: @escaping BlockID.UserAPICallback)
  public func fetchDocuments(requestDict: [Swift.String : Any], _ completion: @escaping BlockID.FetchDocumentsCallback)
  public func setProxy(host: Swift.String, port: Swift.Int, userName: Swift.String, password: Swift.String, isHTPPOnly: Swift.Bool)
  #if compiler(>=5.3) && $NonescapableTypes
  public func getProxyDetails() -> BlockID.ProxyDetails?
  #endif
  public func isPinRegistered() -> Swift.Bool
  public func isDeviceAuthRegisterd() -> Swift.Bool
  public func isLiveIDRegisterd() -> Swift.Bool
  #if compiler(>=5.3) && $NonescapableTypes
  public func getTenant() -> BlockID.BIDTenant?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func getAppTenant() -> BlockID.BIDTenant?
  #endif
  public func getDeviceAuth() -> BlockID.DeviceAuth
  public func isBiometricEnrollmentUpdated() -> Swift.Bool
  public func checkDeviceTrust() -> Swift.Bool
  public func isScreenLockEnabled() -> Swift.Bool
  public func commitTempData()
  public func resetRestorationData()
  #if compiler(>=5.3) && $NonescapableTypes
  public func getTOTP() -> (totp: BlockID.TOTP?, error: BlockID.ErrorResponse?)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func getOfflineTOTP(bidLinkedAccount: BlockID.BIDLinkedAccount) -> (totp: BlockID.TOTP?, error: BlockID.ErrorResponse?)
  #endif
  public func checkUserExist(userId: Swift.String, origin: BlockID.BIDOrigin, completion: @escaping (Swift.Bool) -> ())
  #if compiler(>=5.3) && $NonescapableTypes
  public func addPreLinkedUser(userId: Swift.String, scep_hash: Swift.String, scep_privatekey: Swift.String, scep_expiry: Swift.String, origin: BlockID.BIDOrigin, account: BlockID.BIDAccount?, completion: @escaping BlockID.UserAPICallback)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func unLinkAccount(bidLinkedAccount: BlockID.BIDLinkedAccount, deviceToken: Swift.String? = nil, completion: @escaping BlockID.UserAPICallback)
  #endif
  public func validateAccessCode(code: Swift.String, origin: BlockID.BIDOrigin, completion: @escaping BlockID.AccessCodeValidationAPICallback)
  #if compiler(>=5.3) && $NonescapableTypes
  public func generateSession(origin: BlockID.BIDOrigin, completion: @escaping ((sessionId: Swift.String?, sessionUrl: Swift.String?), _ error: BlockID.ErrorResponse?) -> Swift.Void)
  #endif
  public func getSessionResponse(completion: @escaping BlockID.SessionResponseCallback)
  #if compiler(>=5.3) && $NonescapableTypes
  public func resetPassword(userId: Swift.String, password: Swift.String, account: BlockID.BIDAccount?, origin: BlockID.BIDOrigin, completion: @escaping BlockID.UserAPICallback)
  #endif
  public func resetSDK(licenseKey: Swift.String, rootTenant: BlockID.BIDTenant, reason: Swift.String)
  #if compiler(>=5.3) && $NonescapableTypes
  public func encryptString(str: Swift.String, rcptKey: Swift.String) -> Swift.String?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func decryptString(str: Swift.String, senderKey: Swift.String) -> Swift.String?
  #endif
  public func getWalletPublicKey() -> Swift.String
  public func getServerPublicKey() -> Swift.String
  #if compiler(>=5.3) && $NonescapableTypes
  public func getMnemonicPhrases() -> Swift.String?
  #endif
  public func getDID() -> Swift.String
  public func getIAL(completion: @escaping BlockID.IALCallback)
  #if compiler(>=5.3) && $NonescapableTypes
  public func getLinkedUserAccounts() -> (linkedUsers: [BlockID.BIDLinkedAccount]?, error: BlockID.ErrorResponse?)
  #endif
  public func updateAccounts(accounts: [BlockID.BIDLinkedAccount])
  public func setCurrentUserAccount(account: BlockID.BIDLinkedAccount)
  #if compiler(>=5.3) && $NonescapableTypes
  public func getCurrentUserAccount() -> (currentUser: BlockID.BIDLinkedAccount?, error: BlockID.ErrorResponse?)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func getScopesAttributesDic(scopes: Swift.String, creds: Swift.String, origin: BlockID.BIDOrigin, userId: Swift.String? = nil, completion: @escaping ([Swift.String : Any]?, BlockID.ErrorResponse?) -> Swift.Void)
  #endif
  public func getEventData(publicKey: Swift.String, lon: Swift.Double, lat: Swift.Double, completion: @escaping (Swift.String) -> Swift.Void)
  #if compiler(>=5.3) && $NonescapableTypes
  public func authenticateUser(sessionId: Swift.String?, sessionURL: Swift.String, creds: Swift.String, dictScopes: [Swift.String : Any], lat: Swift.Double, lon: Swift.Double, origin: BlockID.BIDOrigin, userId: Swift.String? = nil, authFactor: Swift.String? = nil, completion: @escaping BlockID.AuthenticateUserCallback)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func authenticateUser(sessionId: Swift.String?, creds: Swift.String, dictScopes: [Swift.String : Any], lat: Swift.Double, lon: Swift.Double, origin: BlockID.BIDOrigin, userId: Swift.String? = nil, authFactor: Swift.String? = nil, completion: @escaping BlockID.AuthenticateUserCallback)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func authenticateUser(sessionId: Swift.String?, creds: Swift.String, scopes: Swift.String, lat: Swift.Double, lon: Swift.Double, origin: BlockID.BIDOrigin, userId: Swift.String? = nil, metaData: [Swift.String : Any]? = nil, extraData: [Swift.String : Any]? = nil, authFactor: Swift.String? = nil, completion: @escaping BlockID.AuthenticateUserCallback)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func authenticateUser(controller: UIKit.UIViewController? = nil, sessionId: Swift.String?, sessionURL: Swift.String, creds: Swift.String, scopes: Swift.String, lat: Swift.Double, lon: Swift.Double, origin: BlockID.BIDOrigin, userId: Swift.String? = nil, metaData: [Swift.String : Any]? = nil, extraData: [Swift.String : Any]? = nil, authFactor: Swift.String? = nil, completion: @escaping BlockID.AuthenticateUserCallback)
  #endif
  public func isTrustedSessionSources(sessionUrl: Swift.String, callback: @escaping (Swift.Bool) -> Swift.Void)
  #if compiler(>=5.3) && $NonescapableTypes
  public func getOfflineAuthPayload(bidLinkedAccount: BlockID.BIDLinkedAccount) -> Swift.String?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func getLicense() -> (license: BlockID.BIDLicense?, error: BlockID.ErrorResponse?)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func getBiometricAssetEnrollments() -> BlockID.BiometricAssets?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func getDigitalAssetEnrollments() -> BlockID.DigitalAssets?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func getPersonalAssetEnrollments() -> BlockID.PersonalAssets?
  #endif
  public func setData(dataStr: Swift.String) -> Swift.String
  #if compiler(>=5.3) && $NonescapableTypes
  public func getData(forKey key: Swift.String) -> Swift.String?
  #endif
  public func purgeData(forKey key: Swift.String)
  #if compiler(>=5.3) && $NonescapableTypes
  public func getVersion() -> Swift.String?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func verifyDocument(dvcID: Swift.String? = nil, dic: [Swift.String : Any], verifications: [Swift.String], mobileSessionId: Swift.String? = nil, mobileDocumentId: Swift.String? = nil, completion: @escaping (Swift.Bool, [Swift.String : Any]?, BlockID.ErrorResponse?) -> Swift.Void)
  #endif
  public func requestSCEPCertificate(requestedAccount: BlockID.BIDLinkedAccount, completion: @escaping BlockID.SCEPCertificateCallback)
  public func checkSCEPCertificate(requestedAccount: BlockID.BIDLinkedAccount, completion: @escaping BlockID.SCEPCertificateCallback)
  @objc deinit
}
extension BlockID.BlockIDSDK {
  public func createAccessCode(payload: BlockID.CreateAccessCodePayload, completion: @escaping BlockID.AccessCodeAPIsCallback)
  public func validateAccessCode(code: Swift.String, completion: @escaping BlockID.AccessCodeValidationAPICallback)
  #if compiler(>=5.3) && $NonescapableTypes
  public func redeemAccessCode(phoneNumber: Swift.String? = nil, code: Swift.String, userId: Swift.String, password: Swift.String, origin: BlockID.BIDOrigin, deviceToken: Swift.String? = nil, lat: Swift.Double, lon: Swift.Double, completion: @escaping BlockID.UserAPICallback)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func redeemAccessCode(code: Swift.String, deviceToken: Swift.String? = nil, lat: Swift.Double, lon: Swift.Double, completion: @escaping BlockID.UserAPICallback)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func verifyUserAccount(userId: Swift.String, password: Swift.String, origin: BlockID.BIDOrigin, deviceToken: Swift.String? = nil, lat: Swift.Double, lon: Swift.Double, completion: @escaping BlockID.UserAPICallback)
  #endif
}
extension BlockID.BlockIDSDK {
  public func getKYC(completion: @escaping BlockID.KYCCallback)
}
extension BlockID.BlockIDSDK {
  public func getMessageGateways(tenant: BlockID.BIDTenant, completion: @escaping BlockID.MessageGatewaysCallback)
}
extension BlockID.BlockIDSDK {
  public func getPasswordPolicy(account: BlockID.BIDLinkedAccount, completion: @escaping BlockID.PasswordPolicyCallback)
}
extension BlockID.BlockIDSDK {
  public func getVCsFrom(downloadURL url: Swift.String, completion: @escaping BlockID.VCsCallback)
  public func getVP(_ dictVCObj: [Swift.String : Any], completion: @escaping BlockID.VPCallback)
}
extension BlockID.BlockIDSDK {
  public func fetchConfig(_ tenantDNS: Swift.String, completion: @escaping BlockID.FetchConfigCallback)
}
extension BlockID.BlockIDSDK {
  #if compiler(>=5.3) && $NonescapableTypes
  public func updateAccountInfo(account: BlockID.BIDLinkedAccount, pushID: Swift.String? = nil, deviceInfo: [Swift.String : Any], completion: @escaping BlockID.UpdateAccInfoCallback)
  #endif
}
extension BlockID.BlockIDSDK {
  public func fetchUserAccountsInfo(accounts: [BlockID.BIDLinkedAccount], completion: @escaping BlockID.FetchUserAccountsInfoCallback)
  public func getRemovedAccountList(completion: @escaping BlockID.UserAccountsRemovedCallback)
  public func fetchUserByUserName(tenant: BlockID.BIDTenant, userName: Swift.String, completion: @escaping BlockID.FetchUserResponseCallBack)
}
extension BlockID.BlockIDSDK {
  public func registerPasskey(controller: UIKit.UIViewController, passkeyRequest: BlockID.PasskeyRequest, completion: @escaping BlockID.PasskeyCallback)
  public func registerPasskeyWithAccountLinking(controller: UIKit.UIViewController, passkeyRequest: BlockID.PasskeyRequest, completion: @escaping BlockID.PasskeyCallback)
  public func authenticatePasskey(controller: UIKit.UIViewController, passkeyRequest: BlockID.PasskeyRequest, completion: @escaping BlockID.PasskeyCallback)
  public func issueJWTOnPasskeyAuthentication(controller: UIKit.UIViewController, passkeyRequest: BlockID.PasskeyRequest, completion: @escaping BlockID.PasskeyCallback)
}
extension BlockID.BlockIDSDK {
  #if compiler(>=5.3) && $NonescapableTypes
  public func createDocumentSession(docType: BlockID.DocumentScannerType, dvcId: Swift.String? = nil, completion: @escaping BlockID.DocumentSessionCallback)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func pollDocumentSession(sessionId: Swift.String, dvcId: Swift.String? = nil, completion: @escaping BlockID.PollSessionCallback)
  #endif
}
extension BlockID.BlockIDSDK {
  public func setRestoreMode()
  public func isRestoreModeOn() -> Swift.Bool
  public func restoreUserDataFromWallet(completion: @escaping BlockID.UserAPICallback)
  @discardableResult
  public func generateWalletForRestore(mnemonics: Swift.String) -> Swift.Bool
  public func isRestoreWalletEnabled(forTenant dns: Swift.String, completion: @escaping (Swift.Bool) -> ())
  #if compiler(>=5.3) && $NonescapableTypes
  public func restoreWalletWithLiveID(controller: UIKit.UIViewController, rootTenantDNS: Swift.String, communityName: Swift.String, dvcID: Swift.String? = nil, completion: @escaping BlockID.RestoreWalletWithLiveIDCallback)
  #endif
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TOTPUtils : ObjectiveC.NSObject {
  public static let sharedInstance: BlockID.TOTPUtils
  public func generateTOTP(_timer timer: Swift.Int, secret: Foundation.Data, algorithm: BlockID.TOTPUtils.Algorithm, digits: Swift.Int) throws -> Swift.String
  public func getTOTP(at time: Foundation.Date) throws -> Swift.String
  public enum Algorithm : Swift.Equatable {
    case sha1
    case sha256
    case sha512
    public static func == (a: BlockID.TOTPUtils.Algorithm, b: BlockID.TOTPUtils.Algorithm) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Error : Swift.Error {
    case invalidTime
    case invalidPeriod
    case invalidDigits
    public static func == (a: BlockID.TOTPUtils.Error, b: BlockID.TOTPUtils.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ChipAuthenticationInfo : BlockID.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getKeyId() -> Swift.Int
  public static func toKeyAgreementAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toCipherAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toKeyLength(oid: Swift.String) throws -> Swift.Int
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public class ASN1Item : Swift.CustomDebugStringConvertible {
  public init(line: Swift.String)
  #if compiler(>=5.3) && $NonescapableTypes
  public func getChild(_ child: Swift.Int) -> BlockID.ASN1Item?
  #endif
  public func getNumberOfChildren() -> Swift.Int
  public var debugDescription: Swift.String {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public class SimpleASN1DumpParser {
  public init()
  public func parse(data: Foundation.Data) throws -> BlockID.ASN1Item
  public func test()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TOTP : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension BlockID.TOTP {
  public func setRemainingSecond(remainingSecond: Swift.Int)
  public func setOTP(totp: Swift.String)
  public func getTOTP() -> Swift.String
  public func getRemainingSecs() -> Swift.Int
}
public struct BIDDeviceInfo {
  public static func getDeviceModel() -> Swift.String
}
public enum ScannerType {
  case SCAN_QR_CODE
  case SCAN_LIVEID
  public static func == (a: BlockID.ScannerType, b: BlockID.ScannerType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias VerifyLiveIDCallback = (_ status: Swift.Bool, _ error: BlockID.ErrorResponse?) -> Swift.Void
public typealias LivenessCheckCallback = (_ status: Swift.Bool, _ token: Swift.String?, _ proof: Swift.String?, _ error: BlockID.ErrorResponse?) -> Swift.Void
public enum AuthAssetType : Swift.String {
  case pin
  case device
  case liveID
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.String)
  #endif
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class BIDAuthProvider {
  public static let shared: BlockID.BIDAuthProvider
  public var liveIdDocID: Swift.String
  public func initialize()
  public func initializePin()
  public func lockSDK()
  public func unLockSDK()
  public func isSDKUnLocked() -> Swift.Bool
  #if compiler(>=5.3) && $NonescapableTypes
  public func getLiveIdImageBase64String() -> Swift.String?
  #endif
  public func isAuthAssetEnrolled(assetType: BlockID.AuthAssetType) -> Swift.Bool
  public func enrollPin(pin: Swift.String, proofedBy: Swift.String, tenant: BlockID.BIDTenant, keyPair: BlockID.APIKeyPair, did: Swift.String, ial: Swift.String, completion: @escaping BlockID.UserAPICallback)
  public func verifyPin(pin: Swift.String) -> Swift.Bool
  public func unEnrollPin(pin: Swift.String, tenant: BlockID.BIDTenant, keyPair: BlockID.APIKeyPair, did: Swift.String, ial: Swift.String, completion: @escaping BlockID.UserAPICallback)
  #if compiler(>=5.3) && $NonescapableTypes
  public func enrollDeviceAuth(allowReEnrollment: Swift.Bool = false, completion: @escaping (Swift.Bool, Any?, Swift.String?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func unenrollDeviceAuth(completion: @escaping (Swift.Bool, Any?, Swift.String?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func verifyDeviceAuth(completion: @escaping (Swift.Bool, BlockID.BiometricError?, Swift.String?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func enrollLiveID(dictLiveID: [Swift.String : Any], tenant: BlockID.BIDTenant, keyPair: BlockID.APIKeyPair, did: Swift.String, ial: Swift.String, livenessResult: Swift.String?, mobileSessionId: Swift.String? = nil, mobileDocumentId: Swift.String? = nil, completion: @escaping BlockID.UserAPICallback)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func verifyLiveID(image: UIKit.UIImage, keyPair: BlockID.APIKeyPair, tenant: BlockID.BIDTenant, did: Swift.String, livenessResult: Swift.String?, mobileSessionId: Swift.String? = nil, mobileDocumentId: Swift.String? = nil, completion: @escaping BlockID.VerifyLiveIDCallback)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func verifyFace(image: UIKit.UIImage, keyPair: BlockID.APIKeyPair, tenant: BlockID.BIDTenant, did: Swift.String, mobileSessionId: Swift.String? = nil, mobileDocumentId: Swift.String? = nil, completion: @escaping (_ status: Swift.Bool, _ error: BlockID.ErrorResponse?) -> Swift.Void)
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BIDSessionResponse : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class SessionResponseData : Swift.Codable {
  public var phoneNumber: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class BIDNewSessionDataReuqest : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class BIDCreateSession : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class BIDNewSessionResponse : ObjectiveC.NSObject, Swift.Decodable {
  @objc override dynamic public init()
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class BIDSelfieSessionDataRequest : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class BIDSessionMetaData : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public typealias UpdateAccInfoCallback = (_ status: Swift.Bool, _ error: BlockID.ErrorResponse?) -> Swift.Void
public enum SecureMessagingSupportedAlgorithms {
  case DES
  case AES
  public static func == (a: BlockID.SecureMessagingSupportedAlgorithms, b: BlockID.SecureMessagingSupportedAlgorithms) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, *)
public class SecureMessaging {
  public init(encryptionAlgorithm: BlockID.SecureMessagingSupportedAlgorithms = .DES, ksenc: [Swift.UInt8], ksmac: [Swift.UInt8], ssc: [Swift.UInt8])
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class SelfieScannerViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency convenience public init(tenant: BlockID.BIDTenant, dvcID: Swift.String, scopes: Swift.String, keyPair: BlockID.APIKeyPair)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  #endif
  @objc deinit
}
extension BlockID.SelfieScannerViewController : SafariServices.SFSafariViewControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func safariViewControllerDidFinish(_ controller: SafariServices.SFSafariViewController)
}
@available(iOS 13, macOS 10.15, *)
public enum NFCPassportReaderError : Swift.Error {
  case ResponseError(Swift.String, Swift.UInt8, Swift.UInt8)
  case InvalidResponse
  case UnexpectedError
  case NFCNotSupported
  case NoConnectedTag
  case D087Malformed
  case InvalidResponseChecksum
  case MissingMandatoryFields
  case CannotDecodeASN1Length
  case InvalidASN1Value
  case UnableToProtectAPDU
  case UnableToUnprotectAPDU
  case UnsupportedDataGroup
  case DataGroupNotRead
  case UnknownTag
  case UnknownImageFormat
  case NotImplemented
  case TagNotValid
  case ConnectionError
  case UserCanceled
  case InvalidMRZKey
  case MoreThanOneTagFound
  case InvalidHashAlgorithmSpecified
  case InvalidDataPassed(Swift.String)
  case NotYetSupported(Swift.String)
}
@available(iOS 13, macOS 10.15, *)
extension BlockID.NFCPassportReaderError : Foundation.LocalizedError {
  #if compiler(>=5.3) && $NonescapableTypes
  public var errorDescription: Swift.String? {
    get
  }
  #endif
}
@available(iOS 13, macOS 10.15, *)
public enum OpenSSLError : Swift.Error {
  case UnableToGetX509CertificateFromPKCS7(Swift.String)
  case UnableToVerifyX509CertificateForSOD(Swift.String)
  case VerifyAndReturnSODEncapsulatedData(Swift.String)
  case UnableToReadECPublicKey(Swift.String)
  case UnableToExtractSignedDataFromPKCS7(Swift.String)
  case VerifySignedAttributes(Swift.String)
  case UnableToParseASN1(Swift.String)
  case UnableToDecryptRSASignature(Swift.String)
}
@available(iOS 13, macOS 10.15, *)
extension BlockID.OpenSSLError : Foundation.LocalizedError {
  #if compiler(>=5.3) && $NonescapableTypes
  public var errorDescription: Swift.String? {
    get
  }
  #endif
}
public enum PassiveAuthenticationError : Swift.Error {
  case UnableToParseSODHashes(Swift.String)
  case InvalidDataGroupHash(Swift.String)
  case SODMissing(Swift.String)
}
extension BlockID.PassiveAuthenticationError : Foundation.LocalizedError {
  #if compiler(>=5.3) && $NonescapableTypes
  public var errorDescription: Swift.String? {
    get
  }
  #endif
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class BIDScannerView : UIKit.UIView {
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  #endif
  @_Concurrency.MainActor @preconcurrency @objc required override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup11 : BlockID.DataGroup {
  public var fullName: Swift.String? {
    get
  }
  public var personalNumber: Swift.String? {
    get
  }
  public var dateOfBirth: Swift.String? {
    get
  }
  public var placeOfBirth: Swift.String? {
    get
  }
  public var address: Swift.String? {
    get
  }
  public var telephone: Swift.String? {
    get
  }
  public var profession: Swift.String? {
    get
  }
  public var title: Swift.String? {
    get
  }
  public var personalSummary: Swift.String? {
    get
  }
  public var proofOfCitizenship: Swift.String? {
    get
  }
  public var tdNumbers: Swift.String? {
    get
  }
  public var custodyInfo: Swift.String? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RegisterUserData : Swift.Codable {
  public var type: Swift.String?
  public var id: Swift.String?
  public var data: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class RegisterUserDataResponse : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class GetDocumentResponse : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class AccessCodeResponse : Swift.Codable {
  public func getPublicKey() -> Swift.String
  #if compiler(>=5.3) && $NonescapableTypes
  public func accessCodeValidationData() -> BlockID.AccessCodeValidationResponseDecryptedData?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func accessCodeRedeemData() -> BlockID.BIDOnboardedUserAccount?
  #endif
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class AccessCodeValidationResponseDecryptedData : Swift.Codable {
  public var uuid: Swift.String!
  public var tenantId: Swift.String!
  public var communityId: Swift.String!
  public var accesscodepayload: BlockID.AccessCodeResponseDataPayload!
  public var phoneRequired: Swift.Bool?
  public var smsServiceNumber: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class AccessCodeResponseDataPayload : Swift.Codable {
  public var userid: Swift.String!
  public var authType: Swift.String!
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class BIDOnboardedUserAccount : Swift.Codable {
  public var userId: Swift.String?
  public var scep_hash: Swift.String?
  public var scep_privatekey: Swift.String?
  public var scep_expiry: Swift.String?
  public var isLinked: Swift.Bool?
  public var origin: BlockID.BIDOrigin!
  public var account: BlockID.BIDAccount?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class EventData : Swift.Codable {
  public var license_hash: Swift.String?
  public var authenticator_version: Swift.String?
  public var authenticator_id: Swift.String?
  public var authenticator_name: Swift.String?
  public var authenticator_os: Swift.String?
  public var person_id: Swift.String?
  public var person_publickey: Swift.String?
  public var person_ial: Swift.String?
  public var user_ial: Swift.String?
  public var user_lat: Swift.String?
  public var user_lon: Swift.String?
  public var device_id: Swift.String?
  public var user_agent: Swift.String?
  public var network_info: Swift.String?
  public var device_name: Swift.String?
  public var os: Swift.String?
  public var os_version: Swift.String?
  public var device_model: Swift.String?
  public var device_make: Swift.String?
  public var auth_factor: Swift.String?
  public var session_url: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class VerifyScanResponse : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct JSONCodingKeys : Swift.CodingKey {
  public var stringValue: Swift.String
  public init(stringValue: Swift.String)
  public var intValue: Swift.Int?
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(intValue: Swift.Int)
  #endif
}
extension Swift.KeyedDecodingContainer {
  public func decode(_ type: Swift.Dictionary<Swift.String, Any>.Type, forKey key: K) throws -> Swift.Dictionary<Swift.String, Any>
  public func decode(_ type: Swift.Array<Any>.Type, forKey key: K) throws -> Swift.Array<Any>
  public func decode(_ type: Swift.Dictionary<Swift.String, Any>.Type) throws -> Swift.Dictionary<Swift.String, Any>
}
extension Swift.UnkeyedDecodingContainer {
  public mutating func decode(_ type: Swift.Array<Any>.Type) throws -> Swift.Array<Any>
  public mutating func decode(_ type: Swift.Dictionary<Swift.String, Any>.Type) throws -> Swift.Dictionary<Swift.String, Any>
}
extension Swift.KeyedEncodingContainerProtocol where Self.Key == BlockID.JSONCodingKeys {
  public mutating func encode(_ value: Swift.Dictionary<Swift.String, Any>) throws
}
extension Swift.KeyedEncodingContainerProtocol {
  #if compiler(>=5.3) && $NonescapableTypes
  public mutating func encode(_ value: Swift.Dictionary<Swift.String, Any>?, forKey key: Self.Key) throws
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public mutating func encode(_ value: Swift.Array<Any>?, forKey key: Self.Key) throws
  #endif
}
extension Swift.UnkeyedEncodingContainer {
  public mutating func encode(_ value: Swift.Array<Any>) throws
  public mutating func encode(_ value: Swift.Dictionary<Swift.String, Any>) throws
}
@_hasMissingDesignatedInitializers public class KYCHashData : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct PasskeyResponse : Swift.Codable {
  public var authenticatorId: Swift.String?
  public var sub: Swift.String?
  public var jwt: Swift.String?
  #if compiler(>=5.3) && $NonescapableTypes
  public init(authenticatorId: Swift.String?, sub: Swift.String?, jwt: Swift.String? = nil)
  #endif
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PasskeyRequest : Swift.Codable {
  public var tenant: BlockID.BIDTenant?
  public var username: Swift.String?
  public var displayName: Swift.String?
  public var deviceName: Swift.String?
  #if compiler(>=5.3) && $NonescapableTypes
  public init(tenant: BlockID.BIDTenant, username: Swift.String, displayName: Swift.String? = nil, deviceName: Swift.String? = nil)
  #endif
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PasskeyHelper : ObjectiveC.NSObject {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BIDLicense : Swift.Codable {
  public var modules: BlockID.LicenseModules!
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class LicenseModules : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 13, macOS 10.15, *)
public enum CertificateType {
  case documentSigningCertificate
  case issuerSigningCertificate
  public static func == (a: BlockID.CertificateType, b: BlockID.CertificateType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public enum CertificateItem : Swift.String {
  case fingerprint
  case issuerName
  case subjectName
  case serialNumber
  case signatureAlgorithm
  case publicKeyAlgorithm
  case notBefore
  case notAfter
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.String)
  #endif
  @available(iOS 13, macOS 10.15, *)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public class X509Wrapper {
  final public let cert: Swift.OpaquePointer
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(with cert: Swift.OpaquePointer?)
  #endif
  public func getItemsAsDict() -> [BlockID.CertificateItem : Swift.String]
  public func certToPEM() -> Swift.String
  #if compiler(>=5.3) && $NonescapableTypes
  public func getFingerprint() -> Swift.String?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func getNotBeforeDate() -> Swift.String?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func getNotAfterDate() -> Swift.String?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func getSerialNumber() -> Swift.String?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func getSignatureAlgorithm() -> Swift.String?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func getPublicKeyAlgorithm() -> Swift.String?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func getIssuerName() -> Swift.String?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func getSubjectName() -> Swift.String?
  #endif
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class COM : BlockID.DataGroup {
  public var version: Swift.String {
    get
  }
  public var unicodeVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class SecurityInfo {
  public func getObjectIdentifier() -> Swift.String
  public func getProtocolOIDString() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class APIKeyPair {
  #if compiler(>=5.3) && $NonescapableTypes
  public func getEncryptedLicenseKey() -> Swift.String?
  #endif
  @objc deinit
}
public struct MRZDocumentData : Swift.Codable {
  public var documentType: Swift.String?
  public var country: Swift.String?
  public var lastName: Swift.String?
  public var firstName: Swift.String?
  public var documentId: Swift.String?
  public var dob: Swift.String?
  public var gender: Swift.String?
  public var doe: Swift.String?
  public var personalNumber: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TOTPGenerator {
  public static let sharedInstance: BlockID.TOTPGenerator
  public static func getTOTP(shareOTPKey: Swift.String) -> BlockID.TOTP
}
public protocol LiveIDResponseDelegate : AnyObject {
  #if compiler(>=5.3) && $NonescapableTypes
  func liveIdDidDetectErrorInScanning(error: BlockID.ErrorResponse?)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  func focusOnFaceChanged(isFocused: Swift.Bool?, message: Swift.String?)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  func liveIdDetectionCompleted(_ liveIdImage: UIKit.UIImage?, signatureToken: Swift.String?, livenessResult: Swift.String?, mobileSessionId: Swift.String?, mobileDocumentId: Swift.String?, error: BlockID.ErrorResponse?)
  #endif
  func faceLivenessCheckStarted()
}
extension BlockID.LiveIDResponseDelegate {
  public func faceLivenessCheckStarted()
  #if compiler(>=5.3) && $NonescapableTypes
  public func liveIdDidDetectErrorInScanning(error: BlockID.ErrorResponse?)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func focusOnFaceChanged(isFocused: Swift.Bool?, message: Swift.String?)
  #endif
}
@objc public class LiveIDScannerHelper : ObjectiveC.NSObject {
  #if compiler(>=5.3) && $NonescapableTypes
  public init(bidScannerView: BlockID.BIDScannerView, overlayFrame: CoreFoundation.CGRect? = nil, liveIdResponseDelegate: any BlockID.LiveIDResponseDelegate)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func startLiveIDScanning(isWithoutLivenessCheck: Swift.Bool? = false, dvcID: Swift.String? = nil, mobileSessionId: Swift.String? = nil, mobileDocumentId: Swift.String? = nil)
  #endif
  public func stopLiveIDScanning()
  @objc deinit
}
extension BlockID.LiveIDScannerHelper : BlockID.LiveIDResponseDelegate {
  #if compiler(>=5.3) && $NonescapableTypes
  public func liveIdDidDetectErrorInScanning(error: BlockID.ErrorResponse?)
  #endif
  public func faceLivenessCheckStarted()
  #if compiler(>=5.3) && $NonescapableTypes
  public func focusOnFaceChanged(isFocused: Swift.Bool?, message: Swift.String?)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func liveIdDetectionCompleted(_ liveIdImage: UIKit.UIImage?, signatureToken: Swift.String?, livenessResult: Swift.String?, mobileSessionId: Swift.String? = nil, mobileDocumentId: Swift.String? = nil, error: BlockID.ErrorResponse?)
  #endif
}
@available(iOS 13, macOS 10.15, *)
public enum DocTypeEnum : Swift.String {
  case TD1
  case TD2
  case OTHER
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.String)
  #endif
  @available(iOS 13, macOS 10.15, *)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup1 : BlockID.DataGroup {
  public var elements: [Swift.String : Swift.String] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup {
  public var datagroupType: BlockID.DataGroupId
  public var body: [Swift.UInt8] {
    get
  }
  public var data: [Swift.UInt8] {
    get
  }
  public func hash(_ hashAlgorythm: Swift.String) -> [Swift.UInt8]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BIDTenant : Swift.Codable {
  public var tenantTag: Swift.String?
  public var community: Swift.String?
  public var dns: Swift.String?
  public var tenantId: Swift.String?
  public var communityId: Swift.String?
  public class func makeTenant(tag: Swift.String, community: Swift.String, dns: Swift.String) -> BlockID.BIDTenant
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct AnalyticsHelper {
  public static func logAppEvent(eventName: Swift.String, tenant: BlockID.BIDTenant, eventParams: [Swift.String : Any])
}
@_hasMissingDesignatedInitializers public class CreateAccessCodePayload {
  public init(version: BlockID.Version, type: BlockID.AccessCodeType, emailID: Swift.String, emailSubject: Swift.String, emailTemplate: Swift.String)
  @objc deinit
}
public enum DocumentScannerType : Swift.String {
  case DL
  case PPT
  case IDCARD
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.String)
  #endif
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup14 : BlockID.DataGroup {
  public var securityInfos: [BlockID.SecurityInfo] {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup15 : BlockID.DataGroup {
  public var rsaPublicKey: Swift.OpaquePointer? {
    get
  }
  public var ecdsaPublicKey: Swift.OpaquePointer? {
    get
  }
  @objc deinit
}
public struct CustomErrors {
  public struct Network {
    public static let OFFLINE: (code: Swift.Int, message: Swift.String)
  }
  public struct License {
    public static let UNAUTHORIZED: (code: Swift.Int, message: Swift.String)
    public static let EXPIRED: (code: Swift.Int, message: Swift.String)
    public static let MODULES_EMPTY: (code: Swift.Int, message: Swift.String)
    public static let MODULE_NOT_ENABLED: (code: Swift.Int, message: Swift.String)
    public static let BAD_REQUEST: (code: Swift.Int, message: Swift.String)
    public static let INVALID: (code: Swift.Int, message: Swift.String)
  }
  public struct Passkey {
    public static let iOS_16_REQUIRED: (code: Swift.Int, message: Swift.String)
    public static let USERNAME_EMPTY: (code: Swift.Int, message: Swift.String)
    public static let DISPLAY_NAME_EMPTY: (code: Swift.Int, message: Swift.String)
    public static let ATTESTATION_OPTIONS_FAILED: (code: Swift.Int, message: Swift.String)
    public static let ATTESTATION_RESULT_FAILED: (code: Swift.Int, message: Swift.String)
    public static let PASSKEY_REGISTRATION_FAILED: (code: Swift.Int, message: Swift.String)
    public static let CANCELED: (code: Swift.Int, message: Swift.String)
    public static let INVALID: (code: Swift.Int, message: Swift.String)
    public static let INVALID_SIGNING: (code: Swift.Int, message: Swift.String)
    public static let UNSUPPORTED_CREDENTIAL_TYPE: (code: Swift.Int, message: Swift.String)
    public static let ASSERTION_OPTIONS_FAILED: (code: Swift.Int, message: Swift.String)
    public static let ASSERTION_RESULT_FAILED: (code: Swift.Int, message: Swift.String)
    public static let UNHANDLED_CREDENTIAL_TYPE: (code: Swift.Int, message: Swift.String)
    public static let NOT_INTERACTIVE: (code: Swift.Int, message: Swift.String)
    public static let MATCHED_EXCLUDED_CREDENTIAL: (code: Swift.Int, message: Swift.String)
    public static let LINKING_FAILED: (code: Swift.Int, message: Swift.String)
    public static let FETCH_WALLET_FAILED: (code: Swift.Int, message: Swift.String)
    public static let PASSKEY_AUTHENTICATION_FAILED: (code: Swift.Int, message: Swift.String)
  }
  public struct SCEPCheck {
    public static let INVALID: (code: Swift.Int, message: Swift.String)
    public static let NOT_LINKED: (code: Swift.Int, message: Swift.String)
  }
  public struct PublicKey {
    public static let NOT_FOUND: (code: Swift.Int, message: Swift.String)
  }
  public struct KYC {
    public static let KYC_NOT_COMPLETE: (code: Swift.Int, msg: Swift.String)
  }
  public struct Account {
    public static let INVALID_ACCOUNT: (code: Swift.Int, msg: Swift.String)
    public static let ACCOUNTS_NOT_FOUND: (code: Swift.Int, msg: Swift.String)
  }
  public struct VCs {
    public static let SERVICE_URL_NOT_SET: (code: Swift.Int, message: Swift.String)
    public static let INVALID_VC_DATA: (code: Swift.Int, message: Swift.String)
  }
  public struct DocumentScanner {
    public static let CANCELED: (code: Swift.Int, message: Swift.String)
    public static let INVALID_DOC_TYPE: (code: Swift.Int, message: Swift.String)
  }
  public struct CaaS {
    public static let GLOBAL_CAAS_URL_NOT_SET: (code: Swift.Int, message: Swift.String)
    public static let DOCU_VERIFY_SERVICE_URL_NOT_SET: (code: Swift.Int, msg: Swift.String)
    public static let USER_MANGMT_SERVICE_URL_NOT_SET: (code: Swift.Int, message: Swift.String)
    public static let AUTH_N_SERVICE_URL_NOT_SET: (code: Swift.Int, message: Swift.String)
    public static let WEB_AUTHN_SERVICE_URL_NOT_SET: (code: Swift.Int, message: Swift.String)
    public static let ADMIN_CONSOLE_URL_NOT_SET: (code: Swift.Int, message: Swift.String)
  }
  public struct LiveIDSelfie {
    public static let CANCELED: (code: Swift.Int, message: Swift.String)
    public static let WALLETAPI_URL_NOT_SET: (code: Swift.Int, message: Swift.String)
    public static let WALLET_RESTORATION_FAILED: (code: Swift.Int, message: Swift.String)
    public static let GENERATE_SESSION_FAILED: (code: Swift.Int, message: Swift.String)
  }
  public static let kWalletCreationFailed: (code: Swift.Int, msg: Swift.String)
  public static let kUserIdAlreadyExists: (code: Swift.Int, msg: Swift.String)
  public static let kSomethingWentWrong: (code: Swift.Int, msg: Swift.String)
  public static let kSomeProblemWhileFaceFinding: (code: Swift.Int, msg: Swift.String)
  public static let kUnauthorizedAccess: (code: Swift.Int, msg: Swift.String)
  public static let kPublicKeyRequired: (code: Swift.Int, msg: Swift.String)
  public static let kEncryption: (code: Swift.Int, msg: Swift.String)
  public static let kDecryption: (code: Swift.Int, msg: Swift.String)
  public static let kDocumentDataMandatory: (code: Swift.Int, msg: Swift.String)
  public static let kInvalidPP: (code: Swift.Int, msg: Swift.String)
  public static let kDocumentVerificationFailed: (code: Swift.Int, msg: Swift.String)
  public static let kFaceLivenessCheckFailed: (code: Swift.Int, msg: Swift.String)
  public static let KLiveIdTokenValidationFailed: (code: Swift.Int, msg: Swift.String)
  public static let kLiveIDMismatch: (code: Swift.Int, msg: Swift.String)
  public static let kDocumentDataMismatch: (code: Swift.Int, msg: Swift.String)
  public static let kDocumentPhotoComparisionFailed: (code: Swift.Int, msg: Swift.String)
  public static let kDocumentExpired: (code: Swift.Int, msg: Swift.String)
  public static let kDocumentEnrolled: (code: Swift.Int, msg: Swift.String)
  public static let kDocumentPhotoNotFound: (code: Swift.Int, msg: Swift.String)
  public static let kLiveIDMandatory: (code: Swift.Int, msg: Swift.String)
  public static let K_REGISTRATION_NOT_ALLOWED: (code: Swift.Int, message: Swift.String)
  public static let kNotTrustedSessionSource: (code: Swift.Int, msg: Swift.String)
  public static let kPPAboutToExpire: (code: Swift.Int, msg: Swift.String)
  public static let kPPExpired: (code: Swift.Int, msg: Swift.String)
  public static let kInvalidPPBioData: (code: Swift.Int, msg: Swift.String)
  public static let kInvalidPPEChipData: (code: Swift.Int, msg: Swift.String)
  public static let kPPRFIDTimeout: (code: Swift.Int, msg: Swift.String)
  public static let kPPRFIDUserCancelled: (code: Swift.Int, msg: Swift.String)
  public static let kMagicLinkExpired: (code: Swift.Int, msg: Swift.String)
  public static let kMagicLinkCodeRedeemed: (code: Swift.Int, msg: Swift.String)
  public static let kTenantRegisterFailed: (code: Swift.Int, msg: Swift.String)
  public static let K_TENANT_DNS_IS_MANDATORY: (code: Swift.Int, msg: Swift.String)
  public static let K_COMMUNITY_NAME_IS_MANDATORY: (code: Swift.Int, msg: Swift.String)
  public static let K_TENANT_MANDATORY: (code: Swift.Int, message: Swift.String)
  public static let kSessionExpired: (code: Swift.Int, msg: Swift.String)
  public static let K_USER_IS_DISABLED: (code: Swift.Int, message: Swift.String)
  public static let K_USER_IS_LOCKED: (code: Swift.Int, message: Swift.String)
}
@objc public class ErrorResponse : ObjectiveC.NSObject {
  public var code: Swift.Int
  public var message: Swift.String
  public var responseObj: [Swift.String : Any]?
  public init(code: Swift.Int, msg: Swift.String)
  public init(code: Swift.Int, msg: Swift.String, responseObj: [Swift.String : Any])
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ServicePublicKeyResponse : Swift.Codable {
  public var publicKey: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 13, macOS 10.15, *)
public func AESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESECBEncrypt(key: [Swift.UInt8], message: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
public typealias PasswordPolicyCallback = (_ status: Swift.Bool, _ response: BlockID.BIDPasswordPolicy?, _ error: BlockID.ErrorResponse?) -> Swift.Void
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup12 : BlockID.DataGroup {
  public var issuingAuthority: Swift.String? {
    get
  }
  public var dateOfIssue: Swift.String? {
    get
  }
  public var otherPersonsDetails: Swift.String? {
    get
  }
  public var endorsementsOrObservations: Swift.String? {
    get
  }
  public var taxOrExitRequirements: Swift.String? {
    get
  }
  public var frontImage: [Swift.UInt8]? {
    get
  }
  public var rearImage: [Swift.UInt8]? {
    get
  }
  public var personalizationTime: Swift.String? {
    get
  }
  public var personalizationDeviceSerialNr: Swift.String? {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum NFCViewDisplayMessage {
  case requestPresentPassport
  case authenticatingWithPassport(Swift.Int)
  case readingDataGroupProgress(BlockID.DataGroupId, Swift.Int)
  case error(BlockID.NFCPassportReaderError)
  case successfulRead
}
@available(iOS 13, macOS 10.15, *)
extension BlockID.NFCViewDisplayMessage {
  public var description: Swift.String {
    get
  }
}
public typealias AccessCodeAPIsCallback = (_ status: Swift.Bool, _ error: BlockID.ErrorResponse?) -> Swift.Void
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class NotImplementedDG : BlockID.DataGroup {
  @objc deinit
}
public enum RegisterDocType : Swift.String {
  case PPT
  case DL
  case NATIONAL_ID
  case PIN
  case LIVE_ID
  case SSN
  case PHONE
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.String)
  #endif
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum RegisterDocCategory : Swift.String {
  case Misc_Document
  case Identity_Document
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.String)
  #endif
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias DocumentEnrollmentCallback = (_ status: Swift.Bool, _ error: BlockID.ErrorResponse?) -> Swift.Void
@_hasMissingDesignatedInitializers public class BIDDocumentProvider {
  public static let shared: BlockID.BIDDocumentProvider
  #if compiler(>=5.3) && $NonescapableTypes
  public func getUserDocument(id: Swift.String?, type: Swift.String?, category: Swift.String?) -> Swift.String?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func getDocument(id: Swift.String?, type: Swift.String?, category: Swift.String?) -> Swift.Array<Any>?
  #endif
  public func getDocumentCount() -> Swift.Int
  @objc deinit
}
@available(iOS 13, *)
public class PACEHandler {
  public init(cardAccess: BlockID.CardAccess, tagReader: BlockID.TagReader) throws
  public func doPACE(mrzKey: Swift.String, completed: @escaping (Swift.Bool) -> ())
  @objc deinit
}
public func binToHexRep(_ val: [Swift.UInt8], asArray: Swift.Bool = false) -> Swift.String
public func binToHexRep(_ val: Swift.UInt8) -> Swift.String
public func binToHex(_ val: Swift.UInt8) -> Swift.Int
public func binToHex(_ val: [Swift.UInt8]) -> Swift.UInt64
public func binToHex(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.UInt64
public func hexToBin(_ val: Swift.UInt64) -> [Swift.UInt8]
public func binToInt(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.Int
public func binToInt(_ val: [Swift.UInt8]) -> Swift.Int
public func intToBin(_ data: Swift.Int, pad: Swift.Int = 2) -> [Swift.UInt8]
public func hexRepToBin(_ val: Swift.String) -> [Swift.UInt8]
public func xor(_ kifd: [Swift.UInt8], _ response_kicc: [Swift.UInt8]) -> [Swift.UInt8]
public func generateRandomUInt8Array(_ size: Swift.Int) -> [Swift.UInt8]
public func pad(_ toPad: [Swift.UInt8], blockSize: Swift.Int) -> [Swift.UInt8]
public func unpad(_ tounpad: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func mac(algoName: BlockID.SecureMessagingSupportedAlgorithms, key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func desMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func aesMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func wrapDO(b: Swift.UInt8, arr: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func unwrapDO(tag: Swift.UInt8, wrappedData: [Swift.UInt8]) throws -> [Swift.UInt8]
public func intToBytes(val: Swift.Int, removePadding: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func oidToBytes(oid: Swift.String, replaceTag: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: Swift.ArraySlice<Swift.UInt8>) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: [Swift.UInt8]) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func toAsn1Length(_ data: Swift.Int) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcHash(data: [Swift.UInt8], hashAlgorithm: Swift.String) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA1Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA224Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA256Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA512Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA384Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
public enum CacheTTLLIMIT : Swift.Int {
  case oneDay
  case sixHours
  case oneHour
  case tenMinutes
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.Int)
  #endif
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class BIDSDKCacheManager {
  public static let shared: BlockID.BIDSDKCacheManager
  final public let kMyIPKey: Swift.String
  #if compiler(>=5.3) && $NonescapableTypes
  public func setCache(_ key: Swift.String, _ value: Swift.String?, _ ttl: BlockID.CacheTTLLIMIT)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func setCache(_ key: Swift.String, _ value: Swift.String?, _ ttl: Swift.Int)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func getCache(_ key: Swift.String) -> Swift.String?
  #endif
  public func isCacheFresh(_ key: Swift.String) -> Swift.Bool
  #if compiler(>=5.3) && $NonescapableTypes
  public func getAndRetain(_ key: Swift.String) -> Swift.String?
  #endif
  @objc deinit
}
public typealias BIDOriginCallback = (_ status: Swift.Bool, _ account: BlockID.BIDLinkedAccount?, _ index: Swift.Int?) -> Swift.Void
public enum PACEMappingType {
  case GM
  case IM
  case CAM
  public static func == (a: BlockID.PACEMappingType, b: BlockID.PACEMappingType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class PACEInfo : BlockID.SecurityInfo {
  public static let PARAM_ID_GFP_1024_160: Swift.Int
  public static let PARAM_ID_GFP_2048_224: Swift.Int
  public static let PARAM_ID_GFP_2048_256: Swift.Int
  public static let PARAM_ID_ECP_NIST_P192_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P192_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P224_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P224_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P256_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P256_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P320_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P384_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P384_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P512_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P521_R1: Swift.Int
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getVersion() -> Swift.Int
  #if compiler(>=5.3) && $NonescapableTypes
  public func getParameterId() -> Swift.Int?
  #endif
  public func getParameterSpec() throws -> Swift.Int32
  public func getMappingType() throws -> BlockID.PACEMappingType
  public func getKeyAgreementAlgorithm() throws -> Swift.String
  public func getCipherAlgorithm() throws -> Swift.String
  public func getDigestAlgorithm() throws -> Swift.String
  public func getKeyLength() throws -> Swift.Int
  public func createMappingKey() throws -> Swift.OpaquePointer
  public static func getParameterSpec(stdDomainParam: Swift.Int) throws -> Swift.Int32
  public static func toMappingType(oid: Swift.String) throws -> BlockID.PACEMappingType
  public static func toKeyAgreementAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toCipherAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toDigestAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toKeyLength(oid: Swift.String) throws -> Swift.Int
  @objc deinit
}
public class WorkstationAuthOrigin : Swift.Codable {
  public var api: Swift.String?
  public var tag: Swift.String?
  public var community: Swift.String?
  public var publicKey: Swift.String?
  public var scopes: Swift.String?
  public init(api: Swift.String, tag: Swift.String, community: Swift.String, publicKey: Swift.String, scopes: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 13, *)
public class BACHandler {
  public var ksenc: [Swift.UInt8]
  public var ksmac: [Swift.UInt8]
  public var kifd: [Swift.UInt8]
  public init()
  public init(tagReader: BlockID.TagReader)
  #if compiler(>=5.3) && $NonescapableTypes
  public func performBACAndGetSessionKeys(mrzKey: Swift.String, completed: @escaping (_ error: BlockID.NFCPassportReaderError?) -> ())
  #endif
  public func sessionKeys(data: [Swift.UInt8]) throws -> ([Swift.UInt8], [Swift.UInt8], [Swift.UInt8])
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MessageGateway : Swift.Codable {
  public var name: Swift.String?
  public var active: Swift.Bool?
  public var smsServiceNumber: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class BIDLinkedAccount : Swift.Codable, Swift.Equatable {
  public var origin: BlockID.BIDOrigin!
  public var userId: Swift.String
  public var smartcardhash: Swift.String?
  public var sceptoken: Swift.String?
  public var scep_expiry: Swift.String?
  public var account: BlockID.BIDAccount?
  public var passwordPolicy: BlockID.BIDPasswordPolicy?
  public static func == (lhs: BlockID.BIDLinkedAccount, rhs: BlockID.BIDLinkedAccount) -> Swift.Bool
  public func isOfflineAuthSupported() -> Swift.Bool
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 13, macOS 10.15, *)
public enum DataGroupId : Swift.Int, Swift.CaseIterable {
  case COM
  case DG1
  case DG2
  case DG3
  case DG4
  case DG5
  case DG6
  case DG7
  case DG8
  case DG9
  case DG10
  case DG11
  case DG12
  case DG13
  case DG14
  case DG15
  case DG16
  case SOD
  case Unknown
  public func getName() -> Swift.String
  public static func getIDFromName(name: Swift.String) -> BlockID.DataGroupId
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.Int)
  #endif
  @available(iOS 13, macOS 10.15, *)
  public typealias AllCases = [BlockID.DataGroupId]
  @available(iOS 13, macOS 10.15, *)
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [BlockID.DataGroupId] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum Version : Swift.String {
  case DEFAULT
  case ATHENA
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.String)
  #endif
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias RequestBody = [Swift.String : Swift.AnyObject]
public typealias NetworkResponseCallback<T> = (statusCode: Swift.Int?, error: (any Swift.Error)?, result: T?) where T : Swift.Decodable
public typealias APIResponseCallback<T> = (status: Swift.Bool, message: Swift.String, error: BlockID.ErrorResponse?, result: T?) where T : Swift.Decodable
public typealias SessionAPICallback = (_ statusCode: Swift.Int?, _ response: BlockID.BIDSessionResponse?, _ error: Swift.String?, _ errorResponse: BlockID.ErrorResponse?) -> Swift.Void
public struct ProxyDetails {
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BIDNetworkManager : ObjectiveC.NSObject {
  public static let sharedInstance: BlockID.BIDNetworkManager
  #if compiler(>=5.3) && $NonescapableTypes
  public func makeRequest<T>(requestMethod: Alamofire.HTTPMethod, serviceUrl: Swift.String?, requestBody: BlockID.RequestBody?, requestHeaders: Alamofire.HTTPHeaders, completion: @escaping (BlockID.NetworkResponseCallback<T>) -> Swift.Void) where T : Swift.Decodable
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func makeRequest(requestMethod: Alamofire.HTTPMethod, serviceUrl: Swift.String?, requestBody: BlockID.RequestBody?, requestHeaders: Alamofire.HTTPHeaders, completion: @escaping (Swift.String?, Swift.String?, Swift.Bool) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func makeRequestWithStatusCode(requestMethod: Alamofire.HTTPMethod, serviceUrl: Swift.String?, requestBody: BlockID.RequestBody?, requestHeaders: Alamofire.HTTPHeaders, completion: @escaping (Swift.Int?, (any Swift.Error)?, Swift.String?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func request(requestMethod: Alamofire.HTTPMethod, serviceUrl: Swift.String?, requestBody: BlockID.RequestBody?, requestHeaders: Alamofire.HTTPHeaders, completion: @escaping (Swift.Int?, (any Swift.Error)?, Any?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func makeMultipartRequest<T>(requestMethod: Alamofire.HTTPMethod, serviceUrl: Swift.String?, multipartFormData: @escaping (Alamofire.MultipartFormData) -> Swift.Void, requestHeaders: Alamofire.HTTPHeaders, completion: @escaping (BlockID.NetworkResponseCallback<T>) -> Swift.Void) where T : Swift.Decodable
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers public class QRSplitDataPacket : Swift.Codable {
  public class func getTotalPackage(data: Swift.String, packageSize: Swift.Int) -> Swift.Int
  public class func split(offlinePayload: Swift.String, length: Swift.Int) -> [Swift.String]
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class OfflineAuthAccountDetail : Swift.Codable {
  public var user: Swift.String?
  public var did: Swift.String?
  public var hash: Swift.String?
  public var token: Swift.String?
  public var account: BlockID.BIDAccount?
  #if compiler(>=5.3) && $NonescapableTypes
  public init(user: Swift.String, did: Swift.String, hash: Swift.String, token: Swift.String, account: BlockID.BIDAccount?)
  #endif
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class BIDWallet : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TenantInfoAPI : ObjectiveC.NSObject {
  public static let sharedInstance: BlockID.TenantInfoAPI
  public func fetchTenantInfo(dns: Swift.String, community: Swift.String, completion: @escaping (BlockID.APIResponseCallback<BlockID.TenantCommunityResponse>) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TenantCommunityResponse : Swift.Codable {
  public var tenant: BlockID.BIDTenantInfo?
  public var community: BlockID.BIDCommunityInfo?
  public var message: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class BIDTenantInfo : Swift.Codable {
  public var id: Swift.String?
  public var tenanttag: Swift.String?
  public var name: Swift.String?
  public var displayTenantInfoForPersona: Swift.Bool?
  public var otherDNS: [Swift.String]?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class BIDCommunityInfo : Swift.Codable {
  public var id: Swift.String?
  public var mobileLogo: Swift.String?
  public var name: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class BIDPasswordPolicy : Swift.Codable {
  public var allowed: Swift.Bool?
  public var rules: BlockID.PasswordRules?
  public var authtype: Swift.String?
  public var descriptions: [Swift.String]?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class PasswordRules : Swift.Codable {
  public var minEnabled: Swift.Bool?
  public var minSpecialEnabled: Swift.Bool?
  public var minNumbersEnabled: Swift.Bool?
  public var specialCharAllowedEnabled: Swift.Bool?
  public var minAlphaCapsEnabled: Swift.Bool?
  public var noUsername: Swift.Bool?
  public var noUsernameEnabled: Swift.Bool?
  public var allowInRowEnabled: Swift.Bool?
  public var min: Swift.Int?
  public var minSpecial: Swift.Int?
  public var minNumbers: Swift.Int?
  public var specialCharsAllowed: Swift.String?
  public var minAlphaCaps: Swift.Int?
  public var allowInRow: Swift.Int?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class CardAccess {
  public var securityInfos: [BlockID.SecurityInfo] {
    get
  }
  @objc deinit
}
extension Swift.String {
  public func sha512() -> Swift.String
  public func sha256() -> Swift.String
  public func md5HashV1() -> Swift.String
  public func md5HashV0() -> Swift.String
  public func trim() -> Swift.String
  public func deletingPrefix(_ prefix: Swift.String) -> Swift.String
  public func replace(target: Swift.String, with: Swift.String) -> Swift.String
  public func convertStringToHex() -> Swift.String
  public func convertHexToString() -> Swift.String
}
public class FetchConfigResponse : Swift.Codable {
  public var data: [Swift.String : BlockID.MobileAppConfigs.BlockIDConfig]
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class MobileAppConfigs : Swift.Codable {
  @_hasMissingDesignatedInitializers public class BlockIDConfig : Swift.Codable {
    public var app: BlockID.MobileAppConfigs.OriginAllowedToTransfer?
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
  @_hasMissingDesignatedInitializers public class SDKConfig : Swift.Codable {
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
  @_hasMissingDesignatedInitializers public class LiveIdSelfie : Swift.Codable {
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
  @_hasMissingDesignatedInitializers public class OriginAllowedToTransfer : Swift.Codable {
    public var originAllowedToTransfer: [BlockID.MobileAppConfigs.Origin]?
    public var allowedToTransfer: [BlockID.MobileAppConfigs.Origin]?
    public var notAllowedToTransfer: [BlockID.MobileAppConfigs.Origin]?
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
  @_hasMissingDesignatedInitializers public class Origin : Swift.Codable {
    public var dns: Swift.String?
    public var tenantTag: Swift.String?
    public var communityName: Swift.String?
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public protocol RFIDResponseDelegate : AnyObject {
  #if compiler(>=5.3) && $NonescapableTypes
  func rfidScanCompleted(withPassport docDic: [Swift.String : Any]?, error: BlockID.ErrorResponse?)
  #endif
}
@objc public class RFIDScannerHelper : ObjectiveC.NSObject {
  public init(isDataRequiredOnFail: Swift.Bool = false, rfidResponseDelegate: any BlockID.RFIDResponseDelegate, ppObject: [Swift.String : Any], expiryGracePeriod: Swift.Int)
  public func startRFIDScanning(defaultTimeout: Foundation.TimeInterval = 15)
  public func stopRFIDScanning()
  @objc deinit
}
extension BlockID.RFIDScannerHelper : BlockID.RFIDResponseDelegate {
  #if compiler(>=5.3) && $NonescapableTypes
  public func rfidScanCompleted(withPassport docDic: [Swift.String : Any]?, error: BlockID.ErrorResponse?)
  #endif
}
@objc @available(iOS 13, *)
public class PassportReader : ObjectiveC.NSObject {
  public var passiveAuthenticationUsesOpenSSL: Swift.Bool
  #if compiler(>=5.3) && $NonescapableTypes
  public init(logLevel: BlockID.LogLevel = .info, masterListURL: Foundation.URL? = nil)
  #endif
  public func setMasterListURL(_ masterListURL: Foundation.URL)
  public func overrideNFCDataAmountToRead(amount: Swift.Int)
  #if compiler(>=5.3) && $NonescapableTypes
  public func readPassport(mrzKey: Swift.String, tags: [BlockID.DataGroupId] = [], skipSecureElements: Swift.Bool = true, customDisplayMessage: ((BlockID.NFCViewDisplayMessage) -> Swift.String?)? = nil, completed: @escaping (BlockID.NFCPassportModel?, BlockID.NFCPassportReaderError?) -> ())
  #endif
  public func stopReadingPassport()
  @objc deinit
}
@available(iOS 13, *)
extension BlockID.PassportReader : CoreNFC.NFCTagReaderSessionDelegate {
  public func tagReaderSessionDidBecomeActive(_ session: CoreNFC.NFCTagReaderSession)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didInvalidateWithError error: any Swift.Error)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didDetect tags: [CoreNFC.NFCTag])
}
@_hasMissingDesignatedInitializers public class ServerPublicKeyResponse : Swift.Codable {
  public var publicKey: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public enum APIFailedError : Swift.Error {
  case notFound(msg: Swift.String)
}
extension BlockID.APIFailedError : Foundation.LocalizedError {
  #if compiler(>=5.3) && $NonescapableTypes
  public var errorDescription: Swift.String? {
    get
  }
  #endif
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class QRGenerator : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func generateCode(_ string: Swift.String, foregroundColor: UIKit.UIColor = .black, backgroundColor: UIKit.UIColor = .white)
  @objc deinit
}
extension BlockID.KeychainItemAccessibility : Swift.Equatable {}
extension BlockID.KeychainItemAccessibility : Swift.Hashable {}
extension BlockID.AccessCodeType : Swift.Equatable {}
extension BlockID.AccessCodeType : Swift.Hashable {}
extension BlockID.AccessCodeType : Swift.RawRepresentable {}
extension BlockID.PassportAuthenticationStatus : Swift.Equatable {}
extension BlockID.PassportAuthenticationStatus : Swift.Hashable {}
extension BlockID.BiometricError : Swift.Equatable {}
extension BlockID.BiometricError : Swift.Hashable {}
extension BlockID.BiometricType : Swift.Equatable {}
extension BlockID.BiometricType : Swift.Hashable {}
extension BlockID.LogLevel : Swift.Equatable {}
extension BlockID.LogLevel : Swift.Hashable {}
extension BlockID.LogLevel : Swift.RawRepresentable {}
extension BlockID.TOTPUtils.Algorithm : Swift.Hashable {}
extension BlockID.TOTPUtils.Error : Swift.Equatable {}
extension BlockID.TOTPUtils.Error : Swift.Hashable {}
extension BlockID.ScannerType : Swift.Equatable {}
extension BlockID.ScannerType : Swift.Hashable {}
extension BlockID.AuthAssetType : Swift.Equatable {}
extension BlockID.AuthAssetType : Swift.Hashable {}
extension BlockID.AuthAssetType : Swift.RawRepresentable {}
extension BlockID.SecureMessagingSupportedAlgorithms : Swift.Equatable {}
extension BlockID.SecureMessagingSupportedAlgorithms : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension BlockID.CertificateType : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension BlockID.CertificateType : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension BlockID.CertificateItem : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension BlockID.CertificateItem : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension BlockID.CertificateItem : Swift.RawRepresentable {}
@available(iOS 13, macOS 10.15, *)
extension BlockID.DocTypeEnum : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension BlockID.DocTypeEnum : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension BlockID.DocTypeEnum : Swift.RawRepresentable {}
extension BlockID.DocumentScannerType : Swift.Equatable {}
extension BlockID.DocumentScannerType : Swift.Hashable {}
extension BlockID.DocumentScannerType : Swift.RawRepresentable {}
extension BlockID.RegisterDocType : Swift.Equatable {}
extension BlockID.RegisterDocType : Swift.Hashable {}
extension BlockID.RegisterDocType : Swift.RawRepresentable {}
extension BlockID.RegisterDocCategory : Swift.Equatable {}
extension BlockID.RegisterDocCategory : Swift.Hashable {}
extension BlockID.RegisterDocCategory : Swift.RawRepresentable {}
extension BlockID.CacheTTLLIMIT : Swift.Equatable {}
extension BlockID.CacheTTLLIMIT : Swift.Hashable {}
extension BlockID.CacheTTLLIMIT : Swift.RawRepresentable {}
extension BlockID.PACEMappingType : Swift.Equatable {}
extension BlockID.PACEMappingType : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension BlockID.DataGroupId : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension BlockID.DataGroupId : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension BlockID.DataGroupId : Swift.RawRepresentable {}
extension BlockID.Version : Swift.Equatable {}
extension BlockID.Version : Swift.Hashable {}
extension BlockID.Version : Swift.RawRepresentable {}
